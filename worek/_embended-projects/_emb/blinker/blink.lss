
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  0000081a  000008ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000081a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800208  00800208  000008b6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000076  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c6  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f8  00000000  00000000  00001312  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000348  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001954  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006ea  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ca  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_21>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  bc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  c8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  cc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  d0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  d4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  d8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  dc:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  e0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000e4 <__ctors_start>:
  e4:	21 02       	muls	r18, r17

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	ea e1       	ldi	r30, 0x1A	; 26
  fe:	f8 e0       	ldi	r31, 0x08	; 8
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	a8 30       	cpi	r26, 0x08	; 8
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	12 e0       	ldi	r17, 0x02	; 2
 112:	a8 e0       	ldi	r26, 0x08	; 8
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	af 30       	cpi	r26, 0x0F	; 15
 11c:	b1 07       	cpc	r27, r17
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c6 ee       	ldi	r28, 0xE6	; 230
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	04 c0       	rjmp	.+8      	; 0x130 <.do_global_ctors_start>

00000128 <.do_global_ctors_loop>:
 128:	22 97       	sbiw	r28, 0x02	; 2
 12a:	fe 01       	movw	r30, r28
 12c:	0e 94 07 04 	call	0x80e	; 0x80e <__tablejump__>

00000130 <.do_global_ctors_start>:
 130:	c4 3e       	cpi	r28, 0xE4	; 228
 132:	d1 07       	cpc	r29, r17
 134:	c9 f7       	brne	.-14     	; 0x128 <.do_global_ctors_loop>
 136:	0e 94 a1 00 	call	0x142	; 0x142 <main>
 13a:	0c 94 0b 04 	jmp	0x816	; 0x816 <_exit>

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000142 <main>:

int timeH = 100;
int timeL = 900;

void calcTimes();
int main(void)
 142:	2f 92       	push	r2
 144:	3f 92       	push	r3
 146:	4f 92       	push	r4
 148:	5f 92       	push	r5
 14a:	6f 92       	push	r6
 14c:	7f 92       	push	r7
 14e:	8f 92       	push	r8
 150:	9f 92       	push	r9
 152:	af 92       	push	r10
 154:	bf 92       	push	r11
 156:	cf 92       	push	r12
 158:	df 92       	push	r13
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29

	static uint8_t pin() { return PINB; }
	static void pin(uint8_t v) { PINB = v; }

	static uint8_t dir() { return DDRB; }
	static void dir(uint8_t v) { DDRB = v; }
 166:	20 9a       	sbi	0x04, 0	; 4
namespace avrlib {

struct portb
{
	static uint8_t port() { return PORTB; }
	static void port(uint8_t v) { PORTB = v; }
 168:	25 9a       	sbi	0x04, 5	; 4
 16a:	2d 9a       	sbi	0x05, 5	; 5
{
	led1::output(true);
	led2::output(true);
	led2::set();
	
	ADCSRA |=_BV(ADIE);
 16c:	80 91 7a 00 	lds	r24, 0x007A
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 93 7a 00 	sts	0x007A, r24
		ADMUX = (m_aligment<<ADLAR) | m_reference | m_channel;
	}

	void start()
	{
		ADCSRA |= (1<<ADSC);
 176:	80 91 7a 00 	lds	r24, 0x007A
 17a:	80 64       	ori	r24, 0x40	; 64
 17c:	80 93 7a 00 	sts	0x007A, r24
}

void calcTimes()
{

	timeH = (timeTot*(long)fill)>>10;
 180:	40 90 00 02 	lds	r4, 0x0200
 184:	50 90 01 02 	lds	r5, 0x0201
 188:	32 01       	movw	r6, r4
 18a:	88 24       	eor	r8, r8
 18c:	77 fc       	sbrc	r7, 7
 18e:	80 94       	com	r8
 190:	98 2c       	mov	r9, r8
 192:	c0 91 06 02 	lds	r28, 0x0206
 196:	d0 91 07 02 	lds	r29, 0x0207
 19a:	20 91 04 02 	lds	r18, 0x0204
 19e:	30 91 05 02 	lds	r19, 0x0205
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 1a2:	48 ec       	ldi	r20, 0xC8	; 200
 1a4:	24 2e       	mov	r2, r20
 1a6:	31 2c       	mov	r3, r1
 1a8:	28 9a       	sbi	0x05, 0	; 5
	adc.start();

    while (1) 
    {
		led1::set();
		_delay_us(timeH);
 1aa:	b9 01       	movw	r22, r18
 1ac:	88 27       	eor	r24, r24
 1ae:	77 fd       	sbrc	r23, 7
 1b0:	80 95       	com	r24
 1b2:	98 2f       	mov	r25, r24
 1b4:	0e 94 cf 02 	call	0x59e	; 0x59e <__floatsisf>
 1b8:	5b 01       	movw	r10, r22
 1ba:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 1bc:	2b ea       	ldi	r18, 0xAB	; 171
 1be:	3a ea       	ldi	r19, 0xAA	; 170
 1c0:	4a e2       	ldi	r20, 0x2A	; 42
 1c2:	50 e4       	ldi	r21, 0x40	; 64
 1c4:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 1c8:	7b 01       	movw	r14, r22
 1ca:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	40 e8       	ldi	r20, 0x80	; 128
 1d2:	5f e3       	ldi	r21, 0x3F	; 63
 1d4:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 1d8:	88 23       	and	r24, r24
 1da:	14 f4       	brge	.+4      	; 0x1e0 <main+0x9e>
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	52 c0       	rjmp	.+164    	; 0x284 <main+0x142>
		__ticks = 1;
	else if (__tmp > 255)
 1e0:	c8 01       	movw	r24, r16
 1e2:	b7 01       	movw	r22, r14
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	4f e7       	ldi	r20, 0x7F	; 127
 1ea:	53 e4       	ldi	r21, 0x43	; 67
 1ec:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__gesf2>
 1f0:	18 16       	cp	r1, r24
 1f2:	0c f0       	brlt	.+2      	; 0x1f6 <main+0xb4>
 1f4:	43 c0       	rjmp	.+134    	; 0x27c <main+0x13a>
	{
		_delay_ms(__us / 1000.0);
 1f6:	c6 01       	movw	r24, r12
 1f8:	b5 01       	movw	r22, r10
 1fa:	20 e0       	ldi	r18, 0x00	; 0
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	4a e7       	ldi	r20, 0x7A	; 122
 200:	54 e4       	ldi	r21, 0x44	; 68
 202:	0e 94 39 02 	call	0x472	; 0x472 <__divsf3>
 206:	5b 01       	movw	r10, r22
 208:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	4a ef       	ldi	r20, 0xFA	; 250
 210:	54 e4       	ldi	r21, 0x44	; 68
 212:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 216:	7b 01       	movw	r14, r22
 218:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	40 e8       	ldi	r20, 0x80	; 128
 220:	5f e3       	ldi	r21, 0x3F	; 63
 222:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 226:	88 23       	and	r24, r24
 228:	1c f4       	brge	.+6      	; 0x230 <main+0xee>
 22a:	61 e0       	ldi	r22, 0x01	; 1
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	22 c0       	rjmp	.+68     	; 0x274 <main+0x132>
		__ticks = 1;
	else if (__tmp > 65535)
 230:	c8 01       	movw	r24, r16
 232:	b7 01       	movw	r22, r14
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	3f ef       	ldi	r19, 0xFF	; 255
 238:	4f e7       	ldi	r20, 0x7F	; 127
 23a:	57 e4       	ldi	r21, 0x47	; 71
 23c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__gesf2>
 240:	18 16       	cp	r1, r24
 242:	a4 f4       	brge	.+40     	; 0x26c <main+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 244:	c6 01       	movw	r24, r12
 246:	b5 01       	movw	r22, r10
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	40 e2       	ldi	r20, 0x20	; 32
 24e:	51 e4       	ldi	r21, 0x41	; 65
 250:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 254:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 258:	05 c0       	rjmp	.+10     	; 0x264 <main+0x122>
 25a:	c1 01       	movw	r24, r2
 25c:	01 97       	sbiw	r24, 0x01	; 1
 25e:	f1 f7       	brne	.-4      	; 0x25c <main+0x11a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 260:	61 50       	subi	r22, 0x01	; 1
 262:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 264:	61 15       	cp	r22, r1
 266:	71 05       	cpc	r23, r1
 268:	c1 f7       	brne	.-16     	; 0x25a <main+0x118>
 26a:	0e c0       	rjmp	.+28     	; 0x288 <main+0x146>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 26c:	c8 01       	movw	r24, r16
 26e:	b7 01       	movw	r22, r14
 270:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 274:	cb 01       	movw	r24, r22
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <main+0x134>
 27a:	06 c0       	rjmp	.+12     	; 0x288 <main+0x146>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 27c:	c8 01       	movw	r24, r16
 27e:	b7 01       	movw	r22, r14
 280:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 284:	6a 95       	dec	r22
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0x142>
 288:	28 98       	cbi	0x05, 0	; 5
		led1::set(false);
		_delay_us(timeL);
 28a:	be 01       	movw	r22, r28
 28c:	88 27       	eor	r24, r24
 28e:	77 fd       	sbrc	r23, 7
 290:	80 95       	com	r24
 292:	98 2f       	mov	r25, r24
 294:	0e 94 cf 02 	call	0x59e	; 0x59e <__floatsisf>
 298:	5b 01       	movw	r10, r22
 29a:	6c 01       	movw	r12, r24
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
 29c:	2b ea       	ldi	r18, 0xAB	; 171
 29e:	3a ea       	ldi	r19, 0xAA	; 170
 2a0:	4a e2       	ldi	r20, 0x2A	; 42
 2a2:	50 e4       	ldi	r21, 0x40	; 64
 2a4:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 2a8:	7b 01       	movw	r14, r22
 2aa:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	40 e8       	ldi	r20, 0x80	; 128
 2b2:	5f e3       	ldi	r21, 0x3F	; 63
 2b4:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 2b8:	88 23       	and	r24, r24
 2ba:	14 f4       	brge	.+4      	; 0x2c0 <main+0x17e>
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	52 c0       	rjmp	.+164    	; 0x364 <main+0x222>
		__ticks = 1;
	else if (__tmp > 255)
 2c0:	c8 01       	movw	r24, r16
 2c2:	b7 01       	movw	r22, r14
 2c4:	20 e0       	ldi	r18, 0x00	; 0
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	4f e7       	ldi	r20, 0x7F	; 127
 2ca:	53 e4       	ldi	r21, 0x43	; 67
 2cc:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__gesf2>
 2d0:	18 16       	cp	r1, r24
 2d2:	0c f0       	brlt	.+2      	; 0x2d6 <main+0x194>
 2d4:	43 c0       	rjmp	.+134    	; 0x35c <main+0x21a>
	{
		_delay_ms(__us / 1000.0);
 2d6:	c6 01       	movw	r24, r12
 2d8:	b5 01       	movw	r22, r10
 2da:	20 e0       	ldi	r18, 0x00	; 0
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	4a e7       	ldi	r20, 0x7A	; 122
 2e0:	54 e4       	ldi	r21, 0x44	; 68
 2e2:	0e 94 39 02 	call	0x472	; 0x472 <__divsf3>
 2e6:	5b 01       	movw	r10, r22
 2e8:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	4a ef       	ldi	r20, 0xFA	; 250
 2f0:	54 e4       	ldi	r21, 0x44	; 68
 2f2:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 2f6:	7b 01       	movw	r14, r22
 2f8:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 2fa:	20 e0       	ldi	r18, 0x00	; 0
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	40 e8       	ldi	r20, 0x80	; 128
 300:	5f e3       	ldi	r21, 0x3F	; 63
 302:	0e 94 35 02 	call	0x46a	; 0x46a <__cmpsf2>
 306:	88 23       	and	r24, r24
 308:	1c f4       	brge	.+6      	; 0x310 <main+0x1ce>
 30a:	61 e0       	ldi	r22, 0x01	; 1
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	22 c0       	rjmp	.+68     	; 0x354 <main+0x212>
		__ticks = 1;
	else if (__tmp > 65535)
 310:	c8 01       	movw	r24, r16
 312:	b7 01       	movw	r22, r14
 314:	20 e0       	ldi	r18, 0x00	; 0
 316:	3f ef       	ldi	r19, 0xFF	; 255
 318:	4f e7       	ldi	r20, 0x7F	; 127
 31a:	57 e4       	ldi	r21, 0x47	; 71
 31c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__gesf2>
 320:	18 16       	cp	r1, r24
 322:	a4 f4       	brge	.+40     	; 0x34c <main+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 324:	c6 01       	movw	r24, r12
 326:	b5 01       	movw	r22, r10
 328:	20 e0       	ldi	r18, 0x00	; 0
 32a:	30 e0       	ldi	r19, 0x00	; 0
 32c:	40 e2       	ldi	r20, 0x20	; 32
 32e:	51 e4       	ldi	r21, 0x41	; 65
 330:	0e 94 83 03 	call	0x706	; 0x706 <__mulsf3>
 334:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 338:	05 c0       	rjmp	.+10     	; 0x344 <main+0x202>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 33a:	c1 01       	movw	r24, r2
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <main+0x1fa>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 340:	61 50       	subi	r22, 0x01	; 1
 342:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 344:	61 15       	cp	r22, r1
 346:	71 05       	cpc	r23, r1
 348:	c1 f7       	brne	.-16     	; 0x33a <main+0x1f8>
 34a:	0e c0       	rjmp	.+28     	; 0x368 <main+0x226>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 34c:	c8 01       	movw	r24, r16
 34e:	b7 01       	movw	r22, r14
 350:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
 354:	cb 01       	movw	r24, r22
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x214>
 35a:	06 c0       	rjmp	.+12     	; 0x368 <main+0x226>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
 35c:	c8 01       	movw	r24, r16
 35e:	b7 01       	movw	r22, r14
 360:	0e 94 a1 02 	call	0x542	; 0x542 <__fixunssfsi>
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
 364:	6a 95       	dec	r22
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x222>
		
		cli();
 368:	f8 94       	cli
		fill = _v_fill;
 36a:	60 91 02 02 	lds	r22, 0x0202
 36e:	70 91 03 02 	lds	r23, 0x0203
		sei();
 372:	78 94       	sei
}

void calcTimes()
{

	timeH = (timeTot*(long)fill)>>10;
 374:	88 27       	eor	r24, r24
 376:	77 fd       	sbrc	r23, 7
 378:	80 95       	com	r24
 37a:	98 2f       	mov	r25, r24
 37c:	a4 01       	movw	r20, r8
 37e:	93 01       	movw	r18, r6
 380:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsi3>
 384:	2a e0       	ldi	r18, 0x0A	; 10
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	77 95       	ror	r23
 38c:	67 95       	ror	r22
 38e:	2a 95       	dec	r18
 390:	d1 f7       	brne	.-12     	; 0x386 <main+0x244>
 392:	9b 01       	movw	r18, r22
	timeL = timeTot-timeH;
 394:	e2 01       	movw	r28, r4
 396:	c6 1b       	sub	r28, r22
 398:	d7 0b       	sbc	r29, r23
 39a:	06 cf       	rjmp	.-500    	; 0x1a8 <main+0x66>

0000039c <_Z9calcTimesv>:


    }
}

void calcTimes()
 39c:	0f 93       	push	r16
 39e:	1f 93       	push	r17
{

	timeH = (timeTot*(long)fill)>>10;
 3a0:	00 91 00 02 	lds	r16, 0x0200
 3a4:	10 91 01 02 	lds	r17, 0x0201
 3a8:	60 91 0d 02 	lds	r22, 0x020D
 3ac:	70 91 0e 02 	lds	r23, 0x020E
 3b0:	88 27       	eor	r24, r24
 3b2:	77 fd       	sbrc	r23, 7
 3b4:	80 95       	com	r24
 3b6:	98 2f       	mov	r25, r24
 3b8:	98 01       	movw	r18, r16
 3ba:	44 27       	eor	r20, r20
 3bc:	37 fd       	sbrc	r19, 7
 3be:	40 95       	com	r20
 3c0:	54 2f       	mov	r21, r20
 3c2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__mulsi3>
 3c6:	5a e0       	ldi	r21, 0x0A	; 10
 3c8:	95 95       	asr	r25
 3ca:	87 95       	ror	r24
 3cc:	77 95       	ror	r23
 3ce:	67 95       	ror	r22
 3d0:	5a 95       	dec	r21
 3d2:	d1 f7       	brne	.-12     	; 0x3c8 <_Z9calcTimesv+0x2c>
 3d4:	70 93 05 02 	sts	0x0205, r23
 3d8:	60 93 04 02 	sts	0x0204, r22
	timeL = timeTot-timeH;
 3dc:	06 1b       	sub	r16, r22
 3de:	17 0b       	sbc	r17, r23
 3e0:	10 93 07 02 	sts	0x0207, r17
 3e4:	00 93 06 02 	sts	0x0206, r16
}
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <__vector_21>:

  ISR(ADC_vect) {
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	ef 93       	push	r30
 404:	ff 93       	push	r31
		return (ADCSRA & (1<<ADSC)) != 0;
	}

	uint16_t value() const
	{
		uint16_t res = ADCL;
 406:	20 91 78 00 	lds	r18, 0x0078
 40a:	30 e0       	ldi	r19, 0x00	; 0
		res |= ADCH << 8;
 40c:	40 91 79 00 	lds	r20, 0x0079
		_v_fill = adc.value();
 410:	94 2f       	mov	r25, r20
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	82 2b       	or	r24, r18
 416:	93 2b       	or	r25, r19
 418:	90 93 03 02 	sts	0x0203, r25
 41c:	80 93 02 02 	sts	0x0202, r24
		ADMUX = (m_aligment<<ADLAR) | m_reference | m_channel;
	}

	void start()
	{
		ADCSRA |= (1<<ADSC);
 420:	ea e7       	ldi	r30, 0x7A	; 122
 422:	f0 e0       	ldi	r31, 0x00	; 0
 424:	80 81       	ld	r24, Z
 426:	80 64       	ori	r24, 0x40	; 64
 428:	80 83       	st	Z, r24
        adc.start();
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	9f 91       	pop	r25
 430:	8f 91       	pop	r24
 432:	4f 91       	pop	r20
 434:	3f 91       	pop	r19
 436:	2f 91       	pop	r18
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <_GLOBAL__I_adc>:

class sync_adc
{
public:
	explicit sync_adc(uint8_t channel, bool reverse = false, adc_aligment aligment = right, adc_reference reference = aref, adc_clock_prescaller clock = f_cpu_128)
		: m_channel(channel), m_reverse(reverse), m_aligment(aligment), m_reference(reference<<6), m_clock(clock+1)
 442:	10 92 08 02 	sts	0x0208, r1
 446:	10 92 09 02 	sts	0x0209, r1
 44a:	10 92 0a 02 	sts	0x020A, r1
 44e:	90 e4       	ldi	r25, 0x40	; 64
 450:	90 93 0b 02 	sts	0x020B, r25
 454:	87 e0       	ldi	r24, 0x07	; 7
 456:	80 93 0c 02 	sts	0x020C, r24
	{
		ADCSRA |= (1<<ADEN) | m_clock;
 45a:	ea e7       	ldi	r30, 0x7A	; 122
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	87 68       	ori	r24, 0x87	; 135
 462:	80 83       	st	Z, r24
		ADMUX = (m_aligment<<ADLAR) | m_reference | m_channel;
 464:	90 93 7c 00 	sts	0x007C, r25
 468:	08 95       	ret

0000046a <__cmpsf2>:
 46a:	d4 d0       	rcall	.+424    	; 0x614 <__fp_cmp>
 46c:	08 f4       	brcc	.+2      	; 0x470 <__cmpsf2+0x6>
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	08 95       	ret

00000472 <__divsf3>:
 472:	0c d0       	rcall	.+24     	; 0x48c <__divsf3x>
 474:	0a c1       	rjmp	.+532    	; 0x68a <__fp_round>
 476:	02 d1       	rcall	.+516    	; 0x67c <__fp_pscB>
 478:	40 f0       	brcs	.+16     	; 0x48a <__divsf3+0x18>
 47a:	f9 d0       	rcall	.+498    	; 0x66e <__fp_pscA>
 47c:	30 f0       	brcs	.+12     	; 0x48a <__divsf3+0x18>
 47e:	21 f4       	brne	.+8      	; 0x488 <__divsf3+0x16>
 480:	5f 3f       	cpi	r21, 0xFF	; 255
 482:	19 f0       	breq	.+6      	; 0x48a <__divsf3+0x18>
 484:	eb c0       	rjmp	.+470    	; 0x65c <__fp_inf>
 486:	51 11       	cpse	r21, r1
 488:	34 c1       	rjmp	.+616    	; 0x6f2 <__fp_szero>
 48a:	ee c0       	rjmp	.+476    	; 0x668 <__fp_nan>

0000048c <__divsf3x>:
 48c:	0f d1       	rcall	.+542    	; 0x6ac <__fp_split3>
 48e:	98 f3       	brcs	.-26     	; 0x476 <__divsf3+0x4>

00000490 <__divsf3_pse>:
 490:	99 23       	and	r25, r25
 492:	c9 f3       	breq	.-14     	; 0x486 <__divsf3+0x14>
 494:	55 23       	and	r21, r21
 496:	b1 f3       	breq	.-20     	; 0x484 <__divsf3+0x12>
 498:	95 1b       	sub	r25, r21
 49a:	55 0b       	sbc	r21, r21
 49c:	bb 27       	eor	r27, r27
 49e:	aa 27       	eor	r26, r26
 4a0:	62 17       	cp	r22, r18
 4a2:	73 07       	cpc	r23, r19
 4a4:	84 07       	cpc	r24, r20
 4a6:	38 f0       	brcs	.+14     	; 0x4b6 <__divsf3_pse+0x26>
 4a8:	9f 5f       	subi	r25, 0xFF	; 255
 4aa:	5f 4f       	sbci	r21, 0xFF	; 255
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	44 1f       	adc	r20, r20
 4b2:	aa 1f       	adc	r26, r26
 4b4:	a9 f3       	breq	.-22     	; 0x4a0 <__divsf3_pse+0x10>
 4b6:	33 d0       	rcall	.+102    	; 0x51e <__divsf3_pse+0x8e>
 4b8:	0e 2e       	mov	r0, r30
 4ba:	3a f0       	brmi	.+14     	; 0x4ca <__divsf3_pse+0x3a>
 4bc:	e0 e8       	ldi	r30, 0x80	; 128
 4be:	30 d0       	rcall	.+96     	; 0x520 <__divsf3_pse+0x90>
 4c0:	91 50       	subi	r25, 0x01	; 1
 4c2:	50 40       	sbci	r21, 0x00	; 0
 4c4:	e6 95       	lsr	r30
 4c6:	00 1c       	adc	r0, r0
 4c8:	ca f7       	brpl	.-14     	; 0x4bc <__divsf3_pse+0x2c>
 4ca:	29 d0       	rcall	.+82     	; 0x51e <__divsf3_pse+0x8e>
 4cc:	fe 2f       	mov	r31, r30
 4ce:	27 d0       	rcall	.+78     	; 0x51e <__divsf3_pse+0x8e>
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	bb 1f       	adc	r27, r27
 4d8:	26 17       	cp	r18, r22
 4da:	37 07       	cpc	r19, r23
 4dc:	48 07       	cpc	r20, r24
 4de:	ab 07       	cpc	r26, r27
 4e0:	b0 e8       	ldi	r27, 0x80	; 128
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__divsf3_pse+0x56>
 4e4:	bb 0b       	sbc	r27, r27
 4e6:	80 2d       	mov	r24, r0
 4e8:	bf 01       	movw	r22, r30
 4ea:	ff 27       	eor	r31, r31
 4ec:	93 58       	subi	r25, 0x83	; 131
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	2a f0       	brmi	.+10     	; 0x4fc <__divsf3_pse+0x6c>
 4f2:	9e 3f       	cpi	r25, 0xFE	; 254
 4f4:	51 05       	cpc	r21, r1
 4f6:	68 f0       	brcs	.+26     	; 0x512 <__divsf3_pse+0x82>
 4f8:	b1 c0       	rjmp	.+354    	; 0x65c <__fp_inf>
 4fa:	fb c0       	rjmp	.+502    	; 0x6f2 <__fp_szero>
 4fc:	5f 3f       	cpi	r21, 0xFF	; 255
 4fe:	ec f3       	brlt	.-6      	; 0x4fa <__divsf3_pse+0x6a>
 500:	98 3e       	cpi	r25, 0xE8	; 232
 502:	dc f3       	brlt	.-10     	; 0x4fa <__divsf3_pse+0x6a>
 504:	86 95       	lsr	r24
 506:	77 95       	ror	r23
 508:	67 95       	ror	r22
 50a:	b7 95       	ror	r27
 50c:	f7 95       	ror	r31
 50e:	9f 5f       	subi	r25, 0xFF	; 255
 510:	c9 f7       	brne	.-14     	; 0x504 <__divsf3_pse+0x74>
 512:	88 0f       	add	r24, r24
 514:	91 1d       	adc	r25, r1
 516:	96 95       	lsr	r25
 518:	87 95       	ror	r24
 51a:	97 f9       	bld	r25, 7
 51c:	08 95       	ret
 51e:	e1 e0       	ldi	r30, 0x01	; 1
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	bb 1f       	adc	r27, r27
 528:	62 17       	cp	r22, r18
 52a:	73 07       	cpc	r23, r19
 52c:	84 07       	cpc	r24, r20
 52e:	ba 07       	cpc	r27, r26
 530:	20 f0       	brcs	.+8      	; 0x53a <__divsf3_pse+0xaa>
 532:	62 1b       	sub	r22, r18
 534:	73 0b       	sbc	r23, r19
 536:	84 0b       	sbc	r24, r20
 538:	ba 0b       	sbc	r27, r26
 53a:	ee 1f       	adc	r30, r30
 53c:	88 f7       	brcc	.-30     	; 0x520 <__divsf3_pse+0x90>
 53e:	e0 95       	com	r30
 540:	08 95       	ret

00000542 <__fixunssfsi>:
 542:	bc d0       	rcall	.+376    	; 0x6bc <__fp_splitA>
 544:	88 f0       	brcs	.+34     	; 0x568 <__fixunssfsi+0x26>
 546:	9f 57       	subi	r25, 0x7F	; 127
 548:	90 f0       	brcs	.+36     	; 0x56e <__fixunssfsi+0x2c>
 54a:	b9 2f       	mov	r27, r25
 54c:	99 27       	eor	r25, r25
 54e:	b7 51       	subi	r27, 0x17	; 23
 550:	a0 f0       	brcs	.+40     	; 0x57a <__fixunssfsi+0x38>
 552:	d1 f0       	breq	.+52     	; 0x588 <__fixunssfsi+0x46>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	88 1f       	adc	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	1a f0       	brmi	.+6      	; 0x564 <__fixunssfsi+0x22>
 55e:	ba 95       	dec	r27
 560:	c9 f7       	brne	.-14     	; 0x554 <__fixunssfsi+0x12>
 562:	12 c0       	rjmp	.+36     	; 0x588 <__fixunssfsi+0x46>
 564:	b1 30       	cpi	r27, 0x01	; 1
 566:	81 f0       	breq	.+32     	; 0x588 <__fixunssfsi+0x46>
 568:	c3 d0       	rcall	.+390    	; 0x6f0 <__fp_zero>
 56a:	b1 e0       	ldi	r27, 0x01	; 1
 56c:	08 95       	ret
 56e:	c0 c0       	rjmp	.+384    	; 0x6f0 <__fp_zero>
 570:	67 2f       	mov	r22, r23
 572:	78 2f       	mov	r23, r24
 574:	88 27       	eor	r24, r24
 576:	b8 5f       	subi	r27, 0xF8	; 248
 578:	39 f0       	breq	.+14     	; 0x588 <__fixunssfsi+0x46>
 57a:	b9 3f       	cpi	r27, 0xF9	; 249
 57c:	cc f3       	brlt	.-14     	; 0x570 <__fixunssfsi+0x2e>
 57e:	86 95       	lsr	r24
 580:	77 95       	ror	r23
 582:	67 95       	ror	r22
 584:	b3 95       	inc	r27
 586:	d9 f7       	brne	.-10     	; 0x57e <__fixunssfsi+0x3c>
 588:	3e f4       	brtc	.+14     	; 0x598 <__fixunssfsi+0x56>
 58a:	90 95       	com	r25
 58c:	80 95       	com	r24
 58e:	70 95       	com	r23
 590:	61 95       	neg	r22
 592:	7f 4f       	sbci	r23, 0xFF	; 255
 594:	8f 4f       	sbci	r24, 0xFF	; 255
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	08 95       	ret

0000059a <__floatunsisf>:
 59a:	e8 94       	clt
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <__floatsisf+0x12>

0000059e <__floatsisf>:
 59e:	97 fb       	bst	r25, 7
 5a0:	3e f4       	brtc	.+14     	; 0x5b0 <__floatsisf+0x12>
 5a2:	90 95       	com	r25
 5a4:	80 95       	com	r24
 5a6:	70 95       	com	r23
 5a8:	61 95       	neg	r22
 5aa:	7f 4f       	sbci	r23, 0xFF	; 255
 5ac:	8f 4f       	sbci	r24, 0xFF	; 255
 5ae:	9f 4f       	sbci	r25, 0xFF	; 255
 5b0:	99 23       	and	r25, r25
 5b2:	a9 f0       	breq	.+42     	; 0x5de <__floatsisf+0x40>
 5b4:	f9 2f       	mov	r31, r25
 5b6:	96 e9       	ldi	r25, 0x96	; 150
 5b8:	bb 27       	eor	r27, r27
 5ba:	93 95       	inc	r25
 5bc:	f6 95       	lsr	r31
 5be:	87 95       	ror	r24
 5c0:	77 95       	ror	r23
 5c2:	67 95       	ror	r22
 5c4:	b7 95       	ror	r27
 5c6:	f1 11       	cpse	r31, r1
 5c8:	f8 cf       	rjmp	.-16     	; 0x5ba <__floatsisf+0x1c>
 5ca:	fa f4       	brpl	.+62     	; 0x60a <__floatsisf+0x6c>
 5cc:	bb 0f       	add	r27, r27
 5ce:	11 f4       	brne	.+4      	; 0x5d4 <__floatsisf+0x36>
 5d0:	60 ff       	sbrs	r22, 0
 5d2:	1b c0       	rjmp	.+54     	; 0x60a <__floatsisf+0x6c>
 5d4:	6f 5f       	subi	r22, 0xFF	; 255
 5d6:	7f 4f       	sbci	r23, 0xFF	; 255
 5d8:	8f 4f       	sbci	r24, 0xFF	; 255
 5da:	9f 4f       	sbci	r25, 0xFF	; 255
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <__floatsisf+0x6c>
 5de:	88 23       	and	r24, r24
 5e0:	11 f0       	breq	.+4      	; 0x5e6 <__floatsisf+0x48>
 5e2:	96 e9       	ldi	r25, 0x96	; 150
 5e4:	11 c0       	rjmp	.+34     	; 0x608 <__floatsisf+0x6a>
 5e6:	77 23       	and	r23, r23
 5e8:	21 f0       	breq	.+8      	; 0x5f2 <__floatsisf+0x54>
 5ea:	9e e8       	ldi	r25, 0x8E	; 142
 5ec:	87 2f       	mov	r24, r23
 5ee:	76 2f       	mov	r23, r22
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__floatsisf+0x5e>
 5f2:	66 23       	and	r22, r22
 5f4:	71 f0       	breq	.+28     	; 0x612 <__floatsisf+0x74>
 5f6:	96 e8       	ldi	r25, 0x86	; 134
 5f8:	86 2f       	mov	r24, r22
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	2a f0       	brmi	.+10     	; 0x60a <__floatsisf+0x6c>
 600:	9a 95       	dec	r25
 602:	66 0f       	add	r22, r22
 604:	77 1f       	adc	r23, r23
 606:	88 1f       	adc	r24, r24
 608:	da f7       	brpl	.-10     	; 0x600 <__floatsisf+0x62>
 60a:	88 0f       	add	r24, r24
 60c:	96 95       	lsr	r25
 60e:	87 95       	ror	r24
 610:	97 f9       	bld	r25, 7
 612:	08 95       	ret

00000614 <__fp_cmp>:
 614:	99 0f       	add	r25, r25
 616:	00 08       	sbc	r0, r0
 618:	55 0f       	add	r21, r21
 61a:	aa 0b       	sbc	r26, r26
 61c:	e0 e8       	ldi	r30, 0x80	; 128
 61e:	fe ef       	ldi	r31, 0xFE	; 254
 620:	16 16       	cp	r1, r22
 622:	17 06       	cpc	r1, r23
 624:	e8 07       	cpc	r30, r24
 626:	f9 07       	cpc	r31, r25
 628:	c0 f0       	brcs	.+48     	; 0x65a <__fp_cmp+0x46>
 62a:	12 16       	cp	r1, r18
 62c:	13 06       	cpc	r1, r19
 62e:	e4 07       	cpc	r30, r20
 630:	f5 07       	cpc	r31, r21
 632:	98 f0       	brcs	.+38     	; 0x65a <__fp_cmp+0x46>
 634:	62 1b       	sub	r22, r18
 636:	73 0b       	sbc	r23, r19
 638:	84 0b       	sbc	r24, r20
 63a:	95 0b       	sbc	r25, r21
 63c:	39 f4       	brne	.+14     	; 0x64c <__fp_cmp+0x38>
 63e:	0a 26       	eor	r0, r26
 640:	61 f0       	breq	.+24     	; 0x65a <__fp_cmp+0x46>
 642:	23 2b       	or	r18, r19
 644:	24 2b       	or	r18, r20
 646:	25 2b       	or	r18, r21
 648:	21 f4       	brne	.+8      	; 0x652 <__fp_cmp+0x3e>
 64a:	08 95       	ret
 64c:	0a 26       	eor	r0, r26
 64e:	09 f4       	brne	.+2      	; 0x652 <__fp_cmp+0x3e>
 650:	a1 40       	sbci	r26, 0x01	; 1
 652:	a6 95       	lsr	r26
 654:	8f ef       	ldi	r24, 0xFF	; 255
 656:	81 1d       	adc	r24, r1
 658:	81 1d       	adc	r24, r1
 65a:	08 95       	ret

0000065c <__fp_inf>:
 65c:	97 f9       	bld	r25, 7
 65e:	9f 67       	ori	r25, 0x7F	; 127
 660:	80 e8       	ldi	r24, 0x80	; 128
 662:	70 e0       	ldi	r23, 0x00	; 0
 664:	60 e0       	ldi	r22, 0x00	; 0
 666:	08 95       	ret

00000668 <__fp_nan>:
 668:	9f ef       	ldi	r25, 0xFF	; 255
 66a:	80 ec       	ldi	r24, 0xC0	; 192
 66c:	08 95       	ret

0000066e <__fp_pscA>:
 66e:	00 24       	eor	r0, r0
 670:	0a 94       	dec	r0
 672:	16 16       	cp	r1, r22
 674:	17 06       	cpc	r1, r23
 676:	18 06       	cpc	r1, r24
 678:	09 06       	cpc	r0, r25
 67a:	08 95       	ret

0000067c <__fp_pscB>:
 67c:	00 24       	eor	r0, r0
 67e:	0a 94       	dec	r0
 680:	12 16       	cp	r1, r18
 682:	13 06       	cpc	r1, r19
 684:	14 06       	cpc	r1, r20
 686:	05 06       	cpc	r0, r21
 688:	08 95       	ret

0000068a <__fp_round>:
 68a:	09 2e       	mov	r0, r25
 68c:	03 94       	inc	r0
 68e:	00 0c       	add	r0, r0
 690:	11 f4       	brne	.+4      	; 0x696 <__fp_round+0xc>
 692:	88 23       	and	r24, r24
 694:	52 f0       	brmi	.+20     	; 0x6aa <__fp_round+0x20>
 696:	bb 0f       	add	r27, r27
 698:	40 f4       	brcc	.+16     	; 0x6aa <__fp_round+0x20>
 69a:	bf 2b       	or	r27, r31
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__fp_round+0x18>
 69e:	60 ff       	sbrs	r22, 0
 6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__fp_round+0x20>
 6a2:	6f 5f       	subi	r22, 0xFF	; 255
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255
 6a6:	8f 4f       	sbci	r24, 0xFF	; 255
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	08 95       	ret

000006ac <__fp_split3>:
 6ac:	57 fd       	sbrc	r21, 7
 6ae:	90 58       	subi	r25, 0x80	; 128
 6b0:	44 0f       	add	r20, r20
 6b2:	55 1f       	adc	r21, r21
 6b4:	59 f0       	breq	.+22     	; 0x6cc <__fp_splitA+0x10>
 6b6:	5f 3f       	cpi	r21, 0xFF	; 255
 6b8:	71 f0       	breq	.+28     	; 0x6d6 <__fp_splitA+0x1a>
 6ba:	47 95       	ror	r20

000006bc <__fp_splitA>:
 6bc:	88 0f       	add	r24, r24
 6be:	97 fb       	bst	r25, 7
 6c0:	99 1f       	adc	r25, r25
 6c2:	61 f0       	breq	.+24     	; 0x6dc <__fp_splitA+0x20>
 6c4:	9f 3f       	cpi	r25, 0xFF	; 255
 6c6:	79 f0       	breq	.+30     	; 0x6e6 <__fp_splitA+0x2a>
 6c8:	87 95       	ror	r24
 6ca:	08 95       	ret
 6cc:	12 16       	cp	r1, r18
 6ce:	13 06       	cpc	r1, r19
 6d0:	14 06       	cpc	r1, r20
 6d2:	55 1f       	adc	r21, r21
 6d4:	f2 cf       	rjmp	.-28     	; 0x6ba <__fp_split3+0xe>
 6d6:	46 95       	lsr	r20
 6d8:	f1 df       	rcall	.-30     	; 0x6bc <__fp_splitA>
 6da:	08 c0       	rjmp	.+16     	; 0x6ec <__fp_splitA+0x30>
 6dc:	16 16       	cp	r1, r22
 6de:	17 06       	cpc	r1, r23
 6e0:	18 06       	cpc	r1, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	f1 cf       	rjmp	.-30     	; 0x6c8 <__fp_splitA+0xc>
 6e6:	86 95       	lsr	r24
 6e8:	71 05       	cpc	r23, r1
 6ea:	61 05       	cpc	r22, r1
 6ec:	08 94       	sec
 6ee:	08 95       	ret

000006f0 <__fp_zero>:
 6f0:	e8 94       	clt

000006f2 <__fp_szero>:
 6f2:	bb 27       	eor	r27, r27
 6f4:	66 27       	eor	r22, r22
 6f6:	77 27       	eor	r23, r23
 6f8:	cb 01       	movw	r24, r22
 6fa:	97 f9       	bld	r25, 7
 6fc:	08 95       	ret

000006fe <__gesf2>:
 6fe:	8a df       	rcall	.-236    	; 0x614 <__fp_cmp>
 700:	08 f4       	brcc	.+2      	; 0x704 <__gesf2+0x6>
 702:	8f ef       	ldi	r24, 0xFF	; 255
 704:	08 95       	ret

00000706 <__mulsf3>:
 706:	0b d0       	rcall	.+22     	; 0x71e <__mulsf3x>
 708:	c0 cf       	rjmp	.-128    	; 0x68a <__fp_round>
 70a:	b1 df       	rcall	.-158    	; 0x66e <__fp_pscA>
 70c:	28 f0       	brcs	.+10     	; 0x718 <__mulsf3+0x12>
 70e:	b6 df       	rcall	.-148    	; 0x67c <__fp_pscB>
 710:	18 f0       	brcs	.+6      	; 0x718 <__mulsf3+0x12>
 712:	95 23       	and	r25, r21
 714:	09 f0       	breq	.+2      	; 0x718 <__mulsf3+0x12>
 716:	a2 cf       	rjmp	.-188    	; 0x65c <__fp_inf>
 718:	a7 cf       	rjmp	.-178    	; 0x668 <__fp_nan>
 71a:	11 24       	eor	r1, r1
 71c:	ea cf       	rjmp	.-44     	; 0x6f2 <__fp_szero>

0000071e <__mulsf3x>:
 71e:	c6 df       	rcall	.-116    	; 0x6ac <__fp_split3>
 720:	a0 f3       	brcs	.-24     	; 0x70a <__mulsf3+0x4>

00000722 <__mulsf3_pse>:
 722:	95 9f       	mul	r25, r21
 724:	d1 f3       	breq	.-12     	; 0x71a <__mulsf3+0x14>
 726:	95 0f       	add	r25, r21
 728:	50 e0       	ldi	r21, 0x00	; 0
 72a:	55 1f       	adc	r21, r21
 72c:	62 9f       	mul	r22, r18
 72e:	f0 01       	movw	r30, r0
 730:	72 9f       	mul	r23, r18
 732:	bb 27       	eor	r27, r27
 734:	f0 0d       	add	r31, r0
 736:	b1 1d       	adc	r27, r1
 738:	63 9f       	mul	r22, r19
 73a:	aa 27       	eor	r26, r26
 73c:	f0 0d       	add	r31, r0
 73e:	b1 1d       	adc	r27, r1
 740:	aa 1f       	adc	r26, r26
 742:	64 9f       	mul	r22, r20
 744:	66 27       	eor	r22, r22
 746:	b0 0d       	add	r27, r0
 748:	a1 1d       	adc	r26, r1
 74a:	66 1f       	adc	r22, r22
 74c:	82 9f       	mul	r24, r18
 74e:	22 27       	eor	r18, r18
 750:	b0 0d       	add	r27, r0
 752:	a1 1d       	adc	r26, r1
 754:	62 1f       	adc	r22, r18
 756:	73 9f       	mul	r23, r19
 758:	b0 0d       	add	r27, r0
 75a:	a1 1d       	adc	r26, r1
 75c:	62 1f       	adc	r22, r18
 75e:	83 9f       	mul	r24, r19
 760:	a0 0d       	add	r26, r0
 762:	61 1d       	adc	r22, r1
 764:	22 1f       	adc	r18, r18
 766:	74 9f       	mul	r23, r20
 768:	33 27       	eor	r19, r19
 76a:	a0 0d       	add	r26, r0
 76c:	61 1d       	adc	r22, r1
 76e:	23 1f       	adc	r18, r19
 770:	84 9f       	mul	r24, r20
 772:	60 0d       	add	r22, r0
 774:	21 1d       	adc	r18, r1
 776:	82 2f       	mov	r24, r18
 778:	76 2f       	mov	r23, r22
 77a:	6a 2f       	mov	r22, r26
 77c:	11 24       	eor	r1, r1
 77e:	9f 57       	subi	r25, 0x7F	; 127
 780:	50 40       	sbci	r21, 0x00	; 0
 782:	8a f0       	brmi	.+34     	; 0x7a6 <__mulsf3_pse+0x84>
 784:	e1 f0       	breq	.+56     	; 0x7be <__mulsf3_pse+0x9c>
 786:	88 23       	and	r24, r24
 788:	4a f0       	brmi	.+18     	; 0x79c <__mulsf3_pse+0x7a>
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	bb 1f       	adc	r27, r27
 790:	66 1f       	adc	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	91 50       	subi	r25, 0x01	; 1
 798:	50 40       	sbci	r21, 0x00	; 0
 79a:	a9 f7       	brne	.-22     	; 0x786 <__mulsf3_pse+0x64>
 79c:	9e 3f       	cpi	r25, 0xFE	; 254
 79e:	51 05       	cpc	r21, r1
 7a0:	70 f0       	brcs	.+28     	; 0x7be <__mulsf3_pse+0x9c>
 7a2:	5c cf       	rjmp	.-328    	; 0x65c <__fp_inf>
 7a4:	a6 cf       	rjmp	.-180    	; 0x6f2 <__fp_szero>
 7a6:	5f 3f       	cpi	r21, 0xFF	; 255
 7a8:	ec f3       	brlt	.-6      	; 0x7a4 <__mulsf3_pse+0x82>
 7aa:	98 3e       	cpi	r25, 0xE8	; 232
 7ac:	dc f3       	brlt	.-10     	; 0x7a4 <__mulsf3_pse+0x82>
 7ae:	86 95       	lsr	r24
 7b0:	77 95       	ror	r23
 7b2:	67 95       	ror	r22
 7b4:	b7 95       	ror	r27
 7b6:	f7 95       	ror	r31
 7b8:	e7 95       	ror	r30
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	c1 f7       	brne	.-16     	; 0x7ae <__mulsf3_pse+0x8c>
 7be:	fe 2b       	or	r31, r30
 7c0:	88 0f       	add	r24, r24
 7c2:	91 1d       	adc	r25, r1
 7c4:	96 95       	lsr	r25
 7c6:	87 95       	ror	r24
 7c8:	97 f9       	bld	r25, 7
 7ca:	08 95       	ret

000007cc <__mulsi3>:
 7cc:	62 9f       	mul	r22, r18
 7ce:	d0 01       	movw	r26, r0
 7d0:	73 9f       	mul	r23, r19
 7d2:	f0 01       	movw	r30, r0
 7d4:	82 9f       	mul	r24, r18
 7d6:	e0 0d       	add	r30, r0
 7d8:	f1 1d       	adc	r31, r1
 7da:	64 9f       	mul	r22, r20
 7dc:	e0 0d       	add	r30, r0
 7de:	f1 1d       	adc	r31, r1
 7e0:	92 9f       	mul	r25, r18
 7e2:	f0 0d       	add	r31, r0
 7e4:	83 9f       	mul	r24, r19
 7e6:	f0 0d       	add	r31, r0
 7e8:	74 9f       	mul	r23, r20
 7ea:	f0 0d       	add	r31, r0
 7ec:	65 9f       	mul	r22, r21
 7ee:	f0 0d       	add	r31, r0
 7f0:	99 27       	eor	r25, r25
 7f2:	72 9f       	mul	r23, r18
 7f4:	b0 0d       	add	r27, r0
 7f6:	e1 1d       	adc	r30, r1
 7f8:	f9 1f       	adc	r31, r25
 7fa:	63 9f       	mul	r22, r19
 7fc:	b0 0d       	add	r27, r0
 7fe:	e1 1d       	adc	r30, r1
 800:	f9 1f       	adc	r31, r25
 802:	bd 01       	movw	r22, r26
 804:	cf 01       	movw	r24, r30
 806:	11 24       	eor	r1, r1
 808:	08 95       	ret

0000080a <__tablejump2__>:
 80a:	ee 0f       	add	r30, r30
 80c:	ff 1f       	adc	r31, r31

0000080e <__tablejump__>:
 80e:	05 90       	lpm	r0, Z+
 810:	f4 91       	lpm	r31, Z+
 812:	e0 2d       	mov	r30, r0
 814:	19 94       	eijmp

00000816 <_exit>:
 816:	f8 94       	cli

00000818 <__stop_program>:
 818:	ff cf       	rjmp	.-2      	; 0x818 <__stop_program>
